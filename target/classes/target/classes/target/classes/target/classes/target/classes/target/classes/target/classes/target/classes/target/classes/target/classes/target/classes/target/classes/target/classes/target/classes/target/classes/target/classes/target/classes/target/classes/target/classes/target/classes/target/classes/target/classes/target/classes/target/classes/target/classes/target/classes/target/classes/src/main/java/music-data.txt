[Snakes and Arrows] [Rush] 10
[Synchronicity] [The Police] 12
[Piece of Mind] [Iron Maiden] 2
[Plans] [Death Cab For Cutie] 10
[So] [Peter import acm.graphics.GOval;
            import acm.graphics.GRect;
            import acm.program.GraphicsProgram;

            import javax.swing.*;
            import java.awt.*;
            import java.awt.event.MouseEvent;

            import static java.awt.Color.*;

            public class BreakoutGame{

                /** Width and height of application window in pixels */
                public static final int APPLICATION_WIDTH = 400;
                public static final int APPLICATION_HEIGHT = 600;
                /** Dimensions of game board (usually the same) */
                private static final int WIDTH = APPLICATION_WIDTH;
                private static final int HEIGHT = APPLICATION_HEIGHT;
                /** Dimensions of the paddle */
                private static final int PADDLE_WIDTH = 60;
                private static final int PADDLE_HEIGHT = 10;
                /** Offset of the paddle up from the bottom */
                private static final int PADDLE_Y_OFFSET = 30;
                /** Number of bricks per row */
                private static final int NBRICKS_PER_ROW = 10;
                /** Number of rows of bricks */
                private static final int NBRICK_ROWS = 10;
                /** Separation between bricks */
                private static final int BRICK_SEP = 4;
                /** Width of a brick */
                private static final int BRICK_WIDTH =
                        (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;
                /** Height of a brick */
                private static final int BRICK_HEIGHT = 8;
                /** Radius of the ball in pixels */
                private static final int BALL_RADIUS = 10;
                /** Offset of the top brick row from the top */
                private static final int BRICK_Y_OFFSET = 70;
                /** Number of turns */
                private static final int NTURNS = 3;
                private static final double X_VELOCITY = 5;
                private static final double Y_VELOCITY = 0;
                private GOval ball;
                private static final int DELAY = 50;
                private static final double GRAVITY = 3;
                private static final int x = 0;
                private static final int y = 0;
                private double x_velocity = X_VELOCITY;
                private double y_velocity = Y_VELOCITY;
                private GRect paddle;
                private double lastX;
                private double lastY;



                public void run() {

                    setup();
                    while(true) {
                        moveBall();

                        pause(DELAY);
                        addMouseListeners();
                    }

                }
                public void mouseMoved(MouseEvent e) {

                    if (paddle != null) {
                        paddle.move(e.getX() - lastX, e.getY() - lastY);
                        lastX = e.getX();
                        lastY = e.getY();
                    }
                }

                private void setup() {
                    double brick_width_size = (double) BRICK_WIDTH;
                    double brick_height_size = (double) BRICK_HEIGHT;
                    for (int i = 0; i <= 1; i++) {
                        for (int j = 0; j <= NBRICK_ROWS; j++) {
                            double x = (j  * (brick_width_size));
                            double y = (i * brick_height_size);

                          }
                            GRect brick = new GRect(x , y);
                            brick.setFilled(true);
                            brick.setColor(BLUE);
                            add(brick, (APPLICATION_WIDTH - (BRICK_WIDTH * NBRICKS_PER_ROW)) / 2,
                                    BRICK_Y_OFFSET);

                            GRect brick1 = new GRect(x, y);
                            brick1.setFilled(true);
                            brick1.setColor(YELLOW);
                            add(brick1,(APPLICATION_WIDTH - (BRICK_WIDTH * NBRICKS_PER_ROW)) / 2,
                                        BRICK_Y_OFFSET + (2 * BRICK_HEIGHT) + ( BRICK_SEP));

                            GRect brick2 = new GRect(x, y);
                            brick2.setFilled(true);
                            brick2.setColor(RED);
                            add(brick2, (APPLICATION_WIDTH - (BRICK_WIDTH * NBRICKS_PER_ROW)) / 2,
                                    BRICK_Y_OFFSET + (4 *BRICK_HEIGHT) + (2 * BRICK_SEP));
                        }
                    }
                    GOval ball = new GOval(BALL_RADIUS, BALL_RADIUS);
                    ball.setFilled(true);
                    add(ball);


                    GRect paddle = new GRect(PADDLE_WIDTH, PADDLE_HEIGHT);
                    paddle.setFilled(true);
                    add(paddle, 30, 500 );


                }

                private void moveBall() {
                    y_velocity += GRAVITY;
                    ball.move(x_velocity, y_velocity);

                }


            }
Gabriel] 20