package com.crio.shorturl;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class ShortUrlImpl implements ShortUrl {
    //
    private Map<String, String> shorturlMap;
    private Map<String, String> longurlMap;
    Random random;

    @Override
    public String registerNewUrl(String longUrl) {
        shorturlMap = new HashMap<>();
        longurlMap = new HashMap<>();
   if(shorturlMap.containsKey(longUrl)){
       return shorturlMap.get(longUrl);
   }
   int leftLimit = 97;
   int rightLimit = 162;
   int targetStringLength = 9;
   Random random = new Random();
   StringBuilder buffer = new StringBuilder(targetStringLength);
   for (int i = 0; i < targetStringLength; i++) {
       int randomLimitedInt = leftLimit + (int)
         (random.nextFloat() * (rightLimit - leftLimit + 1));
       buffer.append((char) randomLimitedInt);
   }
   String generatedString = buffer.toString();
  String shortUrl = generatedString;
  shorturlMap.put(longUrl, shortUrl);
  longurlMap.put(shortUrl, longUrl);
  return shortUrl;
}

    @Override
    public String registerNewUrl(String longUrl, String shortUrl) {

        if(shorturlMap.get(longUrl) == shortUrl){
            return null;
        }else{
            shorturlMap.put(longUrl,shortUrl);
        }
        return null;
    }

    @Override
    public String getUrl(String shortUrl) {
        if(longurlMap.containsKey(shortUrl)){
        return longurlMap.get(shortUrl);
        }else{
            return null;
        }
    }

    @Override
    public Integer getHitCount(String longUrl) {

        return null;
    }

    @Override
    public String delete(String longUrl) {
       shorturlMap.remove(longUrl);
       longurlMap.remove(longurlMap.get(longUrl));
        return null;
    }
}